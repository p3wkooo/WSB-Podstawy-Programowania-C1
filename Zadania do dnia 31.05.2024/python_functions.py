# -*- coding: utf-8 -*-
"""Python functions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/193RT3OSx88lFiLN6VQUo8h1yXzEUWDPv
"""

#1.Write a Python function to find the maximum of three numbers.
def find_max(a, b, c):

    return max(a, b, c)
num1 = 5
num2 = 10
num3 = 7

max_value = find_max(num1, num2, num3)
print(f"Najwieksza liczba z  {num1}, {num2}, {num3} to {max_value}")

#2.Write a Python function to sum all the numbers in a list.
def sum_of_list(numbers):
    return sum(numbers)

sample_list = [8, 2, 3, 0, 7]

total_sum = sum_of_list(sample_list)
print(f"Suma  {sample_list} to {total_sum}")

#3.Write a Python function to multiply all the numbers in a list.
def product_of_list(numbers):
    product = 1
    for number in numbers:
        product *= number
    return product

sample_list = [8, 2, 3, -1, 7]

total_product = product_of_list(sample_list)
print(f"Iloczyn  {sample_list} wynosi {total_product}")

#4. Write a Python program to reverse a string.
def reverse_string(s):

    return s[::-1]

string = "1234abcd"

reversed_string = reverse_string(string)
print(f"Odwrócony wyraz '{string}' to '{reversed_string}'")

#5. Write a Python function to calculate the factorial of a number (a non-negative integer). The function accepts the number as an argument.
def factorial(n):

    if n < 0:
        raise ValueError("Silnia nie jest zdefiniowana dla liczb ujemnych")
    elif n == 0 or n == 1:
        return 1
    else:
        result = 1
        for i in range(2, n + 1):
            result *= i
        return result
number = 5

factorial_result = factorial(number)
print(f"Silnia liczby {number} to {factorial_result}")

#6.Write a Python function to check whether a number falls within a given range.
def is_in_range(number, start, end):

    return start <= number <= end

number_to_check = 10
start = 5
end = 15

if is_in_range(number_to_check, start, end):
    print(f"{number_to_check } mieści się w zakresie [{start}, {end}]")
else:
    print(f"{number_to_check} nie mieści się w zakresie [{start}, {end}]")

#7. Write a Python function that accepts a string and counts the number of upper and lower case letters.
def count_upper_lower_case(string):
    upper_count = 0
    lower_count = 0
    for char in string:
        if char.isupper():
            upper_count += 1
        elif char.islower():
            lower_count += 1
    return upper_count, lower_count
sample_string = 'The quick Brow Fox'

upper, lower = count_upper_lower_case(sample_string)
print(f"Liczba wielkich liter: {upper}")
print(f"Liczba małych liter: {lower}")

#8.Write a Python function that takes a list and returns a new list with distinct elements from the first list.
def unique_elements(input_list):

    return list(set(input_list))

input_list = [1, 2, 2, 3, 4, 4, 5]

new_list = unique_elements(input_list)
print("Originalna lista:", input_list)
print("Nowa lista z unikalnymi elementami:", new_list)

#9. Write a Python function that takes a number as a parameter and checks whether the number is prime or not.
def is_prime(number):

    if number <= 1:
        return False
    elif number <= 3:
        return True
    elif number % 2 == 0 or number % 3 == 0:
        return False

    i = 5
    while i * i <= number:
        if number % i == 0 or number % (i + 2) == 0:
            return False
        i += 6

    return True
num = 29

if is_prime(num):
    print(f"{num} jest liczbą pierwszą.")
else:
    print(f"{num} nie jest liczbą pierwszą.")

#10. Write a Python program to print the even numbers from a given list.
def print_even_numbers(input_list):

    even_numbers = [num for num in input_list if num % 2 == 0]
    print("Liczby parzyste z podanej listy:", even_numbers)
given_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print_even_numbers(given_list)

#11.Write a Python function to check whether a number is "Perfect" or not.
def is_perfect_number(number):
    if number <= 0:
        return False

    divisors_sum = 0
    for i in range(1, number):
        if number % i == 0:
            divisors_sum += i

    return divisors_sum == number

num = 28

if is_perfect_number(num):
    print(f"{num} jest liczbą doskonałą.")
else:
    print(f"{num} nie jest liczbą doskonałą.")

#12.Write a Python function that checks whether a passed string is a palindrome or not.
def is_palindrome(s):
    s = s.replace(" ", "").lower()
    return s == s[::-1]

string = "kajak"

if is_palindrome(string):
    print(f"'{string}' jest palindromem")
else:
    print(f"'{string}'nie jest palindromem")

#13.Write a Python function that prints out the first n rows of Pascal's triangle.
def pascals_triangle(n):

    for i in range(n):
        row = [1]
        if i > 0:

            for j in range(1, i):
                row.append(pascals_triangle_value(i, j))
            row.append(1)
        print(" ".join(map(str, row)).center(n * 2))

def pascals_triangle_value(row, col):

    if col == 0 or col == row:
        return 1
    else:
        return pascals_triangle_value(row - 1, col - 1) + pascals_triangle_value(row - 1, col)
num_rows = 5
pascals_triangle(num_rows)

#14. Write a Python function to check whether a string is a pangram or not.
import string
import sys

def ispangram(str1, alphabet=string.ascii_lowercase):
    alphaset = set(alphabet)
    str_set = set(str1.lower())
    return alphaset <= str_set

print(ispangram('LUbie psy'))

#15. Write a Python program that accepts a hyphen-separated sequence of words as input and prints the words in a hyphen-separated
def sort_sequence(sequence):
    words = sequence.split('-')
    words.sort()
    sorted = '-'.join(words)

    return sorted

input_sequence = "green-red-yellow-black-white"

sorted= sort_hyphenated_sequence(input_sequence)
print(sorted)

#16.Write a Python function to create and print a list where the values are the squares of numbers between 1 and 30 (both included).
def print_squares():
    squares = [i**2 for i in range(1, 31)]

    print(squares)

print_squares()

#17.Write a Python program to create a chain of function decorators (bold, italic, underline etc.).
def bold(func):
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        return f"<b>{result}</b>"
    return wrapper

def italic(func):
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        return f"<i>{result}</i>"
    return wrapper

def underline(func):
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        return f"<u>{result}</u>"
    return wrapper

@bold
@italic
@underline
def greet(name):
    return f"Hello, {name}!"
print(greet("World"))

#18. Write a Python program to execute a string containing Python code.

def execute_code(code_string):
    try:
        exec(code_string)
    except Exception as e:
        print(f"An error occurred: {e}")

code_to_execute = """
def greet(name):
    return f"Hello, {name}!"

print(greet("World"))
"""

execute_code(code_to_execute)

#19.Write a Python program to access a function inside a function.
def outer_function(x):
    def inner_function(y):
        return y * y

    result = inner_function(x)
    return result

print(outer_function(5))

#20.Write a Python program to detect the number of local variables declared in a function.
def example_function():
    a = 1
    b = 2
    c = 3
    return a + b + c

def count_local_variables(func):
    return func.__code__.co_nlocals

num_locals = count_local_variables(example_function)
print(num_locals)

#21.Write a Python program that invokes a function after a specified period of time.

from time import sleep
import math

def delay(fn, ms, *args):

    sleep(ms / 1000)

    return fn(*args)

print("Pierwiastek kwadratowy po określonej liczbie milisekund:")

print(delay(lambda x: math.sqrt(x), 100, 16))

print(delay(lambda x: math.sqrt(x), 1000, 100))

print(delay(lambda x: math.sqrt(x), 2000, 25100))